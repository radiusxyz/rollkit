// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sequencer/sequencer.proto

package sequencer

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_STATUS_CODE_UNSPECIFIED      StatusCode = 0
	StatusCode_STATUS_CODE_SUCCESS          StatusCode = 1
	StatusCode_STATUS_CODE_IVALID_SIGNATURE StatusCode = 2
	StatusCode_STATUS_CODE_ERROR            StatusCode = 3
)

var StatusCode_name = map[int32]string{
	0: "STATUS_CODE_UNSPECIFIED",
	1: "STATUS_CODE_SUCCESS",
	2: "STATUS_CODE_IVALID_SIGNATURE",
	3: "STATUS_CODE_ERROR",
}

var StatusCode_value = map[string]int32{
	"STATUS_CODE_UNSPECIFIED":      0,
	"STATUS_CODE_SUCCESS":          1,
	"STATUS_CODE_IVALID_SIGNATURE": 2,
	"STATUS_CODE_ERROR":            3,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f457cf8f37407dc7, []int{0}
}

type SequencingResponse struct {
	Code    StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=sequencer.StatusCode" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *SequencingResponse) Reset()         { *m = SequencingResponse{} }
func (m *SequencingResponse) String() string { return proto.CompactTextString(m) }
func (*SequencingResponse) ProtoMessage()    {}
func (*SequencingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f457cf8f37407dc7, []int{0}
}
func (m *SequencingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SequencingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SequencingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SequencingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequencingResponse.Merge(m, src)
}
func (m *SequencingResponse) XXX_Size() int {
	return m.Size()
}
func (m *SequencingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SequencingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SequencingResponse proto.InternalMessageInfo

func (m *SequencingResponse) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_STATUS_CODE_UNSPECIFIED
}

func (m *SequencingResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RequestGetTxOrderList struct {
	RollupId  string `protobuf:"bytes,1,opt,name=rollup_id,json=rollupId,proto3" json:"rollup_id,omitempty"`
	Height    uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *RequestGetTxOrderList) Reset()         { *m = RequestGetTxOrderList{} }
func (m *RequestGetTxOrderList) String() string { return proto.CompactTextString(m) }
func (*RequestGetTxOrderList) ProtoMessage()    {}
func (*RequestGetTxOrderList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f457cf8f37407dc7, []int{1}
}
func (m *RequestGetTxOrderList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetTxOrderList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetTxOrderList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetTxOrderList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetTxOrderList.Merge(m, src)
}
func (m *RequestGetTxOrderList) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetTxOrderList) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetTxOrderList.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetTxOrderList proto.InternalMessageInfo

func (m *RequestGetTxOrderList) GetRollupId() string {
	if m != nil {
		return m.RollupId
	}
	return ""
}

func (m *RequestGetTxOrderList) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *RequestGetTxOrderList) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ResponseGetTxOrderList struct {
	Result      *SequencingResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	TxOrderList []string            `protobuf:"bytes,2,rep,name=tx_order_list,json=txOrderList,proto3" json:"tx_order_list,omitempty"`
}

func (m *ResponseGetTxOrderList) Reset()         { *m = ResponseGetTxOrderList{} }
func (m *ResponseGetTxOrderList) String() string { return proto.CompactTextString(m) }
func (*ResponseGetTxOrderList) ProtoMessage()    {}
func (*ResponseGetTxOrderList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f457cf8f37407dc7, []int{2}
}
func (m *ResponseGetTxOrderList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetTxOrderList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetTxOrderList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetTxOrderList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetTxOrderList.Merge(m, src)
}
func (m *ResponseGetTxOrderList) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetTxOrderList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetTxOrderList.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetTxOrderList proto.InternalMessageInfo

func (m *ResponseGetTxOrderList) GetResult() *SequencingResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ResponseGetTxOrderList) GetTxOrderList() []string {
	if m != nil {
		return m.TxOrderList
	}
	return nil
}

func init() {
	proto.RegisterEnum("sequencer.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterType((*SequencingResponse)(nil), "sequencer.SequencingResponse")
	proto.RegisterType((*RequestGetTxOrderList)(nil), "sequencer.RequestGetTxOrderList")
	proto.RegisterType((*ResponseGetTxOrderList)(nil), "sequencer.ResponseGetTxOrderList")
}

func init() { proto.RegisterFile("sequencer/sequencer.proto", fileDescriptor_f457cf8f37407dc7) }

var fileDescriptor_f457cf8f37407dc7 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xdd, 0x8e, 0x93, 0x40,
	0x14, 0x66, 0xb6, 0x9b, 0x2a, 0x67, 0xd5, 0xb0, 0x63, 0xba, 0x8b, 0xee, 0x4a, 0x90, 0x2b, 0xf4,
	0x62, 0x4d, 0x6a, 0x7c, 0x80, 0x4a, 0x71, 0x43, 0xb2, 0x69, 0xcd, 0x0c, 0x98, 0x78, 0x45, 0x6a,
	0x39, 0xa1, 0x18, 0x84, 0x3a, 0x33, 0x98, 0x26, 0xbe, 0x84, 0x8f, 0xe5, 0x65, 0x2f, 0xbd, 0x34,
	0xed, 0x8b, 0x98, 0xd2, 0x1f, 0x50, 0x7b, 0x37, 0xe7, 0x9c, 0x6f, 0xbe, 0x9f, 0x33, 0x03, 0x4f,
	0x24, 0x7e, 0xad, 0xb0, 0x98, 0xa2, 0x78, 0x75, 0x38, 0xdd, 0xcc, 0x45, 0xa9, 0x4a, 0xaa, 0x1f,
	0x1a, 0xce, 0x47, 0xa0, 0x7c, 0x5b, 0x64, 0x45, 0xca, 0x50, 0xce, 0xcb, 0x42, 0x22, 0x7d, 0x01,
	0xa7, 0xd3, 0x32, 0x41, 0x93, 0xd8, 0xc4, 0x7d, 0xd4, 0xef, 0xdd, 0x34, 0x04, 0x5c, 0x4d, 0x54,
	0x25, 0xbd, 0x32, 0x41, 0x56, 0x43, 0xa8, 0x09, 0xf7, 0xbe, 0xa0, 0x94, 0x93, 0x14, 0xcd, 0x13,
	0x9b, 0xb8, 0x3a, 0xdb, 0x97, 0xce, 0x67, 0xe8, 0xb1, 0xcd, 0x3d, 0xa9, 0x6e, 0x51, 0x85, 0x8b,
	0xb1, 0x48, 0x50, 0xdc, 0x65, 0x52, 0xd1, 0x2b, 0xd0, 0x45, 0x99, 0xe7, 0xd5, 0x3c, 0xce, 0x92,
	0x5a, 0x42, 0x67, 0xf7, 0xb7, 0x8d, 0x20, 0xa1, 0x17, 0xd0, 0x9d, 0x61, 0x96, 0xce, 0x54, 0x4d,
	0x77, 0xca, 0x76, 0x15, 0xbd, 0x06, 0x5d, 0x66, 0x69, 0x31, 0x51, 0x95, 0x40, 0xb3, 0x63, 0x13,
	0xf7, 0x01, 0x6b, 0x1a, 0x8e, 0x84, 0x8b, 0xbd, 0xf9, 0x7f, 0xc4, 0xde, 0x40, 0x57, 0xa0, 0xac,
	0x72, 0x55, 0x2b, 0x9d, 0xf5, 0x9f, 0xb5, 0xc3, 0xfc, 0x97, 0x9c, 0xed, 0xc0, 0xd4, 0x81, 0x87,
	0x6a, 0x11, 0x97, 0x1b, 0x9a, 0x38, 0xcf, 0xe4, 0xc6, 0x4d, 0xc7, 0xd5, 0xd9, 0x99, 0x6a, 0xa8,
	0x5f, 0x7e, 0x07, 0x68, 0xd6, 0x41, 0xaf, 0xe0, 0x92, 0x87, 0x83, 0x30, 0xe2, 0xb1, 0x37, 0x1e,
	0xfa, 0x71, 0x34, 0xe2, 0xef, 0x7d, 0x2f, 0x78, 0x17, 0xf8, 0x43, 0x43, 0xa3, 0x97, 0xf0, 0xb8,
	0x3d, 0xe4, 0x91, 0xe7, 0xf9, 0x9c, 0x1b, 0x84, 0xda, 0x70, 0xdd, 0x1e, 0x04, 0x1f, 0x06, 0x77,
	0xc1, 0x30, 0xe6, 0xc1, 0xed, 0x68, 0x10, 0x46, 0xcc, 0x37, 0x4e, 0x68, 0x0f, 0xce, 0xdb, 0x08,
	0x9f, 0xb1, 0x31, 0x33, 0x3a, 0xfd, 0x19, 0x9c, 0x37, 0xf6, 0x39, 0x8a, 0x6f, 0xd9, 0x14, 0x29,
	0x07, 0x68, 0xe2, 0x53, 0xbb, 0x15, 0xf5, 0xe8, 0x4b, 0x3c, 0x7d, 0xfe, 0x17, 0xe2, 0xd8, 0xfe,
	0x1c, 0xed, 0xad, 0xf9, 0x73, 0x65, 0x91, 0xe5, 0xca, 0x22, 0xbf, 0x57, 0x16, 0xf9, 0xb1, 0xb6,
	0xb4, 0xe5, 0xda, 0xd2, 0x7e, 0xad, 0x2d, 0xed, 0x53, 0xb7, 0xfe, 0x4e, 0xaf, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x16, 0x8a, 0x03, 0xbf, 0x6b, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SequencingServiceClient is the client API for SequencingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SequencingServiceClient interface {
	GetTxOrder(ctx context.Context, in *RequestGetTxOrderList, opts ...grpc.CallOption) (*ResponseGetTxOrderList, error)
}

type sequencingServiceClient struct {
	cc *grpc.ClientConn
}

func NewSequencingServiceClient(cc *grpc.ClientConn) SequencingServiceClient {
	return &sequencingServiceClient{cc}
}

func (c *sequencingServiceClient) GetTxOrder(ctx context.Context, in *RequestGetTxOrderList, opts ...grpc.CallOption) (*ResponseGetTxOrderList, error) {
	out := new(ResponseGetTxOrderList)
	err := c.cc.Invoke(ctx, "/sequencer.SequencingService/GetTxOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequencingServiceServer is the server API for SequencingService service.
type SequencingServiceServer interface {
	GetTxOrder(context.Context, *RequestGetTxOrderList) (*ResponseGetTxOrderList, error)
}

// UnimplementedSequencingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSequencingServiceServer struct {
}

func (*UnimplementedSequencingServiceServer) GetTxOrder(ctx context.Context, req *RequestGetTxOrderList) (*ResponseGetTxOrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxOrder not implemented")
}

func RegisterSequencingServiceServer(s *grpc.Server, srv SequencingServiceServer) {
	s.RegisterService(&_SequencingService_serviceDesc, srv)
}

func _SequencingService_GetTxOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetTxOrderList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencingServiceServer).GetTxOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sequencer.SequencingService/GetTxOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencingServiceServer).GetTxOrder(ctx, req.(*RequestGetTxOrderList))
	}
	return interceptor(ctx, in, info, handler)
}

var _SequencingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sequencer.SequencingService",
	HandlerType: (*SequencingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTxOrder",
			Handler:    _SequencingService_GetTxOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sequencer/sequencer.proto",
}

func (m *SequencingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SequencingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SequencingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSequencer(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintSequencer(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetTxOrderList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetTxOrderList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetTxOrderList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintSequencer(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintSequencer(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RollupId) > 0 {
		i -= len(m.RollupId)
		copy(dAtA[i:], m.RollupId)
		i = encodeVarintSequencer(dAtA, i, uint64(len(m.RollupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseGetTxOrderList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetTxOrderList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetTxOrderList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxOrderList) > 0 {
		for iNdEx := len(m.TxOrderList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxOrderList[iNdEx])
			copy(dAtA[i:], m.TxOrderList[iNdEx])
			i = encodeVarintSequencer(dAtA, i, uint64(len(m.TxOrderList[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequencer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSequencer(dAtA []byte, offset int, v uint64) int {
	offset -= sovSequencer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SequencingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSequencer(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSequencer(uint64(l))
	}
	return n
}

func (m *RequestGetTxOrderList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupId)
	if l > 0 {
		n += 1 + l + sovSequencer(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovSequencer(uint64(m.Height))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSequencer(uint64(l))
	}
	return n
}

func (m *ResponseGetTxOrderList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovSequencer(uint64(l))
	}
	if len(m.TxOrderList) > 0 {
		for _, s := range m.TxOrderList {
			l = len(s)
			n += 1 + l + sovSequencer(uint64(l))
		}
	}
	return n
}

func sovSequencer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSequencer(x uint64) (n int) {
	return sovSequencer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SequencingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequencer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SequencingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SequencingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequencer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= StatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequencer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSequencer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSequencer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequencer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSequencer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetTxOrderList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequencer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetTxOrderList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetTxOrderList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequencer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSequencer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSequencer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequencer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequencer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequencer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSequencer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequencer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSequencer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetTxOrderList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequencer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetTxOrderList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetTxOrderList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequencer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequencer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequencer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &SequencingResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOrderList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequencer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSequencer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSequencer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOrderList = append(m.TxOrderList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequencer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSequencer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSequencer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSequencer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSequencer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSequencer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSequencer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSequencer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSequencer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSequencer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSequencer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSequencer = fmt.Errorf("proto: unexpected end of group")
)
